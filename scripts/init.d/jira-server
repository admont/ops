#!/bin/bash
#
# jira-server	Start up the JIRA server daemon
#
# chkconfig: 2345 80 05
# description: JIRA is a proprietary issue tracking product, developed by Atlassian. \
#              This service starts up the JIRA server daemon.
# processname: jira-server
# pidfile: /var/run/jira-server.pid
#
### BEGIN INIT INFO
# Provides: jira-server
# Required-Start: $local_fs $remote_fs $network
# Required-Stop: $local_fs $remote_fs $network
# Should-Start: $syslog
# Should-Stop: $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start up the JIRA server daemon
# Description: JIRA is a proprietary issue tracking product, developed by Atlassian.
#              This service starts up the JIRA server daemon.
### END INIT INFO

PROG='jira-server'
PROG_NAME='JIRA server'
PROG_PS='jira'
# Location of JIRA installation directory
PROG_INSTALL='/opt/jira'
# Name of the user to run as
PROG_USER='jira'
# Startup timeout
STARTUP_WAIT=300
# Shutdown timeout
SHUTDOWN_WAIT=300
# Startup command
STARTUP_CMD="$PROG_INSTALL/bin/start-jira.sh"
# Shutdown command
SHUTDOWN_CMD="$PROG_INSTALL/bin/stop-jira.sh"

PIDFILE="/var/run/$PROG.pid"

# Source function library.
. /etc/init.d/functions

# Source configuration if any.
if [ -f /etc/sysconfig/$PROG ]; then
    . /etc/sysconfig/$PROG
fi

if [ -x "/sbin/runuser" ]; then
	SUCMD="/sbin/runuser"
else
	SUCMD="su"
fi

start() {
	echo -n $"Starting $PROG_NAME: "

	if status -p $PIDFILE $PROG > /dev/null; then
		success
		echo
		echo $"$PROG_NAME is already running"
		return 0
	fi

	rm -f $PROG_INSTALL/logs/catalina.out
	$SUCMD - $PROG_USER -c "$STARTUP_CMD >/dev/null 2>&1 &"

	TIMEOUT="$STARTUP_WAIT"
	TMP_COUNT=0
	while [ $TIMEOUT -gt 0 ]; do
		grep 'Server startup in' $PROG_INSTALL/logs/catalina.out >/dev/null 2>&1 && break
		sleep 1
		let TIMEOUT=$TIMEOUT-1
		let TMP_COUNT=$TMP_COUNT+1
		if [ $TMP_COUNT -gt 5 ]; then
			echo -n $'.'
			TMP_COUNT=0
		fi
	done

	if [ $TIMEOUT -le 0 ]; then
        failure
        echo
        echo $"Timeout error occurred while $PROG_NAME startup."
        return 1
    else
    	pgrep -fl $PROG_PS | grep 'java' | awk '{print $1}' > $PIDFILE
		success
		echo
		return 0
    fi
}

stop() {
	echo -n $"Stopping $PROG_NAME: "

	if ! status -p $PIDFILE $PROG > /dev/null; then
		success
		echo
		echo $"$PROG_NAME is not running"
		return 0
	fi

	killproc -p $PIDFILE -d $SHUTDOWN_WAIT $PROG

	if [ $? = 0 ]; then
		rm -f $PIDFILE
		success
		echo
		return 0
    else
        failure
        echo
        echo $"Error occurred while $PROG_NAME shutdown."
        return 1
    fi
}

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	restart)
		stop && sleep 10 && start
    	;;
    status)
    	status -p $PIDFILE $PROG
    	;;
    *)
    	echo $"Usage: $0 {start|stop|restart|status}"
    	exit 2
    	;;
esac
